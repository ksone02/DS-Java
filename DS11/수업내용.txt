LL -> 왼쪽의 왼쪽이 높아짐.
LR -> 왼쪽의 오른쪽 섭이 높아짐
와 같은 논리

삭제연산
-> 삭제된 반대편에서 삽입이 된 것 처럼 생각한다.

AVL 수행시간 -> BST와 유사
AVL 트리 높이에 비례. O(logN)
AVL 트리에서는 높이가 logN, 항상 균일하게 유지하려고 하기 때문.
BST는 높이가 달라짐에 따라 수행시간도 달라지는 형태와는 비교된다.
h = logN

회전연산 -> O(1)시간 소요.

AVL 트리는 항상 좋은 성능 X,
정렬 된 데이터를 삽입하고 랜덤하게 데이터를 탐색할 때 효과 짱짱
But 랜덤순서의(랜덤정렬) 랜덤순서는 이진탐색트리가 더 좋다..
별루안중요함*

AVL -> bf가 1이 넘지 않게 balance 조정

6장 해쉬는 나중에함. 우선순위큐 먼저
탐색을 잘하도록 만든 자료구조. 테이블모양

---

스택과 큐의 한계: 삽입 항목이 우선순위를 가지려면 삽입할 때마다
우선순위에 따라서 정렬해야 함. But 정렬하는 것 -> 수행시간이 매우 김.
큐지만 우선순위가 높은 것만 따로 저장하려면 트리를 이용해보려고 함.

우선순위 큐: 항목 삽입 시 정렬이 없고, 임의의 우선순위 항목의
접근 및 삭제를 O(1) 시간에 지원하는 효율적인 자료구조

여러가지 우선순위 큐 중 대표격 이진 힙만 함.

이진힙: 완전이진트리로서 부모의 우선순위가 자식의 우선순위보다 높은 자료구

트리에서 Key라고 하는 걸 어떻게 생각하느냐에 따라 우선순위가 달라짐.
Key가 작으면 우선순위가 높다

1. 완전이진트리인가?
2. 부모노드가 자식노드보다 우선순위가 높은가?

완전이진트리 -> 일차원으로 구현하면 비어있는 원소가 생기지 않아 효율적이다.
이진힙 - 최소힙, 최대힙

최소힙
> 키 값이 작을수록 높은 우선순위
> 루트에는 항상 가장 작은 키가 저장돰
> O(1) 시간에 최소 키를 가진 노드 접근 가능 -> 일차원 배열이니까 그냥 a[n] 하면 접근

최대힙
> 키 값이 클수록 더 높은 우선순위

최솟값 삭제 연산(deleteMin)
> 루트의 키를 삭제
> 힙 속성(heap property) 회복
-> downheap

삽입 연산 (insert) :
> 힙의 마지막 노드(배열 마지막 원소) 바로 다음 노드로 새 항목 저장
> 힙 속성(heap property) 회복
->upheap


--2회차--
<복습>
부모와 자식간의 관계가 중요함.
루트가 너무 크면 내려줘야함 -> Downheap 하면서 자식과 비교비교 -> 리프까지 감

삽입시에는
리프(마지막 노드) 에 삽입 -> if 중간에삽입 -> 나머지 노드 다 이동 -> 많은 시간
마지막에서 위로 이동 -> Upheap

---

BST -> 이진탐색 binary search tree -> 보완 -> AVL
Node들을 배열 X 레퍼런스(ref)로 구현했음. (일반적인 트리)

이번에는 배열로 구현함.
Node가 아닌 Entry?
Key만 중요함. Value는 별상관...

상향식 힙 만들기의
핵심 아이디어
a[n/2] 부터 a[1]까지 차례로 downheap을 각각 수행하여 힙속성을 충족시킨다.

상향식 힙 만드는 순서
마지막노드 -> 자식이 없으니까 안 봐도 됨
맨 마지막 레벨(부모 기준(2번째))의 마지막 노드의 인덱스는 전체의 노드 수 N의 N/2개다.
고위에는 또 반줄, 또 반줄

이진 힙의 추가 연산을 위한 자료구조
position과 key -> 정렬을 해서 배열에 저장
position -> 힙에서의 index
key -> 키

"복원" -> heap 속성에 맞게 upheap downheap을 수행하는 과정

최소힙에서 key 찾기 힘듬. 그래서 key와 position을 통해 O(logN)이면 찾을 수 있고
60을 35만큼 감소시켜서 25로 만들고 부모노드와 비교 반복 --> upheap 수행

key값이 변화하면 다시 정렬을 해야함. key 값 찾는건 얼마 안걸리는데 upheap하는데 추가로 소요됨

힙의 높이 -> 완전이진트리이기 때문에 log(N+1)
각 힙 연산의 수행시간은 O(logN) BigO(logN)

힙 만들기 downheap 수행 -> O(N)